id: c276c08c-2eb0-4dfe-b542-91e8409c60ab
name: Understanding encryption
challenge: Change the Pneuma encryption key in the Go code, then compile the agent and start it normally,
  ensuring it connects to Operator successfully.
context: |
  When you start Pneuma, it fires off a beacon to Operator as a "hello" message. This beacon contains several properties,
  such as the computer's name and operating system. The beacon is encrypted with a 32-character key, which ensures that
  if someone is "sniffing" the network traffic, they will not be able to read the message. This encryption key is stored
  inside the Pneuma source code inside a variable called AESKey. Operator has a copy of this same key, which you can
  see when clicking the key icon inside the application. When Operator receives a beacon, it attempts to decrypt it
  using the keys it has listed. If none of the keys work, the beacon is rejected. However, if any match, it will decrypt
  it and allow the agent to connect. In this challenge, you will change the encryption key both within the Pneuma source
  code as well as in the Operator's key icon (so they match). Then, you'll recompile Pneuma with the new key and start it,
  confirming the beacon is accepted by Operator. Before starting this challenge, you should download the Pneuma source
  code and read the README.
template:
  name: submit
  data: []
resources:
  links: {}
hints:
  - You cannot use the pre-compiled Pneuma agents to complete this challenge
  - Did you download or clone the Pneuma repository and read the README about compiling the code?
  - Did you install GoLang 1.13+ on your computer?
  - Did you change the AESKey in pneuma/util/config.go. It can be anything - but it must be 32-characters.
  - Did you add your new key to Operator? Check the Settings section.
  - Did Operator receive a beacon notification when you started the agent?
  - You may want to finish the rest of the flags in this section and come back to this one.
blocks:
  Compile code: |
    Compiling is the transformation from Source Code (human readable) into machine code (computer executable). A
    compiler takes the recipe (code) for a new program (written in a high level language) and transforms this Code into
    a new language (Machine Language) that can be understood by the computer itself. The Pneuma agent is written in GoLang,
    specifically because it can be cross-compiled to execute on nearly any operating system. This means one piece of source
    code can run on MacOS, Windows and Linux, negating the need to write separate programs for each.
  How antivirus works: |
    Antivirus software runs in the background on your computer, checking every file you open. This is generally known
    as on-access scanning, background scanning, resident scanning, real-time protection, or something else, depending
    on your antivirus program. One of the main things antivirus looks for are files with hashes matching known,
    malicious software. By compiling the source code yourself, you're able to change it, producing a different file hash
    each time - which can trick an antivirus program which is only looking for "known" hashes.
  Hiding parameters inside Pneuma: |
    In previous challenges, you started Pneuma against HTTP and UDP protocols, passing in parameters for the contact
    and server address. These parameters will stick out like a sore thumb to defenders who are scanning process lists
    (things running on a computer). In Pneuma, you can update the default values for parameters in main.go before you
    compile the agent, allowing you to execute the agent without parameters - thus lowering your chances of getting
    caught.
  Pneuma randomHash variable: |
    Pneuma has an embedded variable called randomHash. This variable is not used anywhere inside the agent but is
    instead an easy value to change, to any string value, before you compile the agent, to ensure each compiled file
    has a different file hash. This way, if defensive teams find an instance of Pneuma on a computer - and flag the MD5
    file hash as malicious, no other agents running in their network will be caught. Note: this is not the same as the
    encryptionKey.
  Pneuma: |
    Pneuma is the default Operator agent, written in GoLang, and pre-compiled for all major operating systems. You
    can download a copy of the agent from the Operate section (look for the agent icon in the dock). Run the agent
    with the -help parameter for more information.
answer:
  script: Number(Agent.a.filter(function (a) { return a.key != 'abcdefghijklmnopqrstuvwxyz012345' }).length > 0)
  value: 1
