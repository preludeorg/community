id: e573a081-0fc3-49b3-b039-cd72e3772a62
name: Chain subscription
challenge: How many TTPs are included in our most recently published chain?
context: |
  You may have read about the Community and Professional licenses by now but here's a little more information.
  The Community repository is the open-source arm of Operator. It contains dozens of free procedures, all ready to
  be used within the app. These procedures are reloaded everytime you open Operator. You can use these procedures 
  - or write your own - to create custom chains, which you can then deploy into your environment. 
  Upgrading to a professional license gets you a subscription to the chains the Prelude security team publishes each
  week. Internally, we design and build attack chains that are ready out-of-the-box for red and purple team exercises.
  Head to chains.prelude.org to see some past chains. While chains are built to sync with Operator seamlessly
  you can also access the chains over the API directly.
template:
  name: input
  data: []
resources:
  links: {}
hints:
  - Read the documentation about the Professional license
blocks:
  Community license: |
    The Community repository has hundreds of TTPs, organized by ATT&CK tactics. This repository
    gets new additions consistently and contributions are welcomed. Shortly after new TTPs get merged into Community,
    they will appear here, in the desktop application, ready to be used.
  Professional license: |
    If you have a Professional license to Operator, in addition to the TTPs you get in the Community repository your
    Operator instance will be continuously loaded with hundreds of closed-source procedures.
  Chains API: |
    Every week, the Prelude team designs, builds and chains together TTPs. These chains, which mimic
    real-world cyberattacks, can be safely used to test your internal defenses. You can access these chains from
    within Operator or over our API.
answer:
  script: 
    new Promise((resolve, reject) => {
      Requests.hq.getChains()
      .then(chains => resolve(Number(chains[1].ttps.length === $('#answer').val())))})
  value: 1
